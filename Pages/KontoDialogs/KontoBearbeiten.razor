
@page "/konten/{id:int}/bearbeiten"
@using System.ComponentModel.DataAnnotations
@using monexa.Models
@using monexa.Models.Enums

<PageTitle>Konto bearbeiten</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4 mb-8">
    @if (account == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        <!-- Header mit Zurück-Button und Konto-Info -->
        <MudPaper Class="pa-4 mb-4" Elevation="0">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2" Class="mb-2">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" 
                               Color="Color.Default" 
                               Href="/konten"
                               Title="Zurück zur Übersicht"/>
                <MudText Typo="Typo.h5">Konto bearbeiten</MudText>
            </MudStack>
            <MudChip T="string" Icon="@GetAccountTypeIcon(account.Type)" 
                     Color="@GetAccountTypeColor(account.Type)" 
                     Size="Size.Small">
                @GetAccountTypeText(account.Type)
            </MudChip>
        </MudPaper>

        <!-- Formular -->
        <MudPaper Class="pa-6" Elevation="2">
            <MudForm @ref="form" @bind-IsValid="formValid">
                <MudGrid Spacing="3">
                    <!-- Allgemeine Informationen -->
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6" Class="mb-2">Allgemeine Informationen</MudText>
                        <MudDivider />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="account.Name" 
                                      Label="Kontoname" 
                                      Required="true"
                                      RequiredError="Kontoname ist erforderlich"
                                      Variant="Variant.Outlined"
                                      HelperText="Geben Sie einen aussagekräftigen Namen ein"/>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudSelect @bind-Value="account.Type" 
                                   Label="Kontotyp" 
                                   Required="true"
                                   Variant="Variant.Outlined"
                                   AnchorOrigin="Origin.BottomCenter">
                            @foreach (AccountType type in Enum.GetValues(typeof(AccountType)))
                            {
                                <MudSelectItem Value="@type">
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@GetAccountTypeIcon(type)" Size="Size.Small" />
                                        <MudText>@GetAccountTypeText(type)</MudText>
                                    </MudStack>
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudStack Spacing="2">
                            <MudSwitch T="bool" @bind-Checked="account.IsActive" 
                                       Label="Konto ist aktiv" 
                                       Color="Color.Success"
                                       Class="mt-2"/>
                            @if (!account.IsActive)
                            {
                                <MudAlert Severity="Severity.Warning" Dense="true" Variant="Variant.Text">
                                    Inaktive Konten werden nicht in Statistiken berücksichtigt
                                </MudAlert>
                            }
                        </MudStack>
                    </MudItem>

                    <!-- Bankinformationen -->
                    <MudItem xs="12" Class="mt-4">
                        <MudText Typo="Typo.h6" Class="mb-2">Bankinformationen</MudText>
                        <MudDivider />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="account.BankName" 
                                      Label="Bank" 
                                      Required="true"
                                      RequiredError="Bank ist erforderlich"
                                      Variant="Variant.Outlined"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.AccountBalance"/>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="account.IBAN" 
                                      Label="IBAN" 
                                      Variant="Variant.Outlined"
                                      Mask="@ibanMask"
                                      HelperText="Optional: Internationale Bankkontonummer"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.CreditCard"/>
                    </MudItem>

                    <!-- Finanzinformationen -->
                    <MudItem xs="12" Class="mt-4">
                        <MudText Typo="Typo.h6" Class="mb-2">Finanzinformationen</MudText>
                        <MudDivider />
                    </MudItem>

                    <MudItem xs="12" md="8">
                        <MudNumericField @bind-Value="account.Balance" 
                                         Label="Aktueller Kontostand" 
                                         Format="N2"
                                         Variant="Variant.Outlined"
                                         Adornment="Adornment.Start"
                                         AdornmentText="€"
                                         HelperText="Aktueller Kontostand (wird durch Transaktionen aktualisiert)"/>
                    </MudItem>

                    <MudItem xs="12" md="4">
                        <MudSelect @bind-Value="account.Currency" 
                                   Label="Währung" 
                                   Required="true"
                                   Variant="Variant.Outlined">
                            <MudSelectItem Value="@("EUR")">EUR (€)</MudSelectItem>
                            <MudSelectItem Value="@("USD")">USD ($)</MudSelectItem>
                            <MudSelectItem Value="@("GBP")">GBP (£)</MudSelectItem>
                            <MudSelectItem Value="@("CHF")">CHF (Fr.)</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <!-- Kontostand Zusammenfassung -->
                    <MudItem xs="12">
                        <MudPaper Class="pa-4" Outlined="true">
                            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.body1">Aktueller Kontostand:</MudText>
                                <MudText Typo="Typo.h6" 
                                         Color="@(account.Balance >= 0 ? Color.Success : Color.Error)">
                                    @account.Balance.ToString("C", new System.Globalization.CultureInfo("de-DE"))
                                </MudText>
                            </MudStack>
                        </MudPaper>
                    </MudItem>

                    <!-- Zusätzliche Informationen -->
                    <MudItem xs="12" Class="mt-4">
                        <MudText Typo="Typo.h6" Class="mb-2">Zusätzliche Informationen</MudText>
                        <MudDivider />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="account.Description" 
                                      Label="Beschreibung" 
                                      Lines="4"
                                      Variant="Variant.Outlined"
                                      HelperText="Optional: Notizen oder zusätzliche Informationen zu diesem Konto"/>
                    </MudItem>

                    <!-- Änderungshistorie Info -->
                    <MudItem xs="12" Class="mt-2">
                        <MudAlert Severity="Severity.Info" Variant="Variant.Text" Dense="true">
                            <MudText Typo="Typo.body2">
                                <strong>Letzter Stand:</strong> @originalBalance.ToString("C", new System.Globalization.CultureInfo("de-DE"))
                                @if (HasBalanceChanged())
                                {
                                    <span> → Änderung: @GetBalanceChange()</span>
                                }
                            </MudText>
                        </MudAlert>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudPaper>

        <!-- Action Buttons - Fixed am unteren Rand für mobile -->
        <MudPaper Class="pa-4 mt-4" Elevation="4" Style="position: sticky; bottom: 0; z-index: 10;">
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Default"
                           StartIcon="@Icons.Material.Filled.Cancel"
                           Href="konten">
                    Abbrechen
                </MudButton>
                <MudStack Row="true" Spacing="2">
                    <MudButton Variant="Variant.Outlined" 
                               Color="Color.Error"
                               StartIcon="@Icons.Material.Filled.Delete"
                               OnClick="DeleteAccount">
                        Löschen
                    </MudButton>
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Save"
                               OnClick="SaveAccount"
                               Disabled="@(!formValid || !HasChanges())">
                        Speichern
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudPaper>
    }
</MudContainer>

@code {
    [Parameter]
    public int Id { get; set; }

    private Konto? account;
    private decimal originalBalance;
    private Konto? originalAccount;
    private MudForm form;
    private bool formValid;
    
    // IBAN Maske für bessere Eingabe
    private IMask ibanMask = new PatternMask("AA## #### #### #### #### ##")
    {
        MaskChars = new[] { new MaskChar('A', @"[A-Za-z]"), new MaskChar('#', @"[0-9]") },
        CleanDelimiters = true,
        Transformation = AllUpperCase
    };

    private static char AllUpperCase(char c) => c.ToString().ToUpperInvariant()[0];

    protected override void OnInitialized()
    {
        LoadAccount();
    }

    private void LoadAccount()
    {
        // Hier würde normalerweise der API-Call erfolgen
        // account = await AccountService.GetByIdAsync(Id);
        
        // Testdaten laden
        var testAccounts = GetTestAccounts();
        account = testAccounts.FirstOrDefault(a => a.Id == Id);
        
        if (account != null)
        {
            originalBalance = account.Balance;
            // Kopie für Änderungserkennung
            originalAccount = new Konto
            {
                Id = account.Id,
                Name = account.Name,
                Type = account.Type,
                IBAN = account.IBAN,
                Balance = account.Balance,
                Currency = account.Currency,
                BankName = account.BankName,
                IsActive = account.IsActive,
                Description = account.Description
            };
        }
    }

    private bool HasBalanceChanged()
    {
        return account != null && account.Balance != originalBalance;
    }

    private string GetBalanceChange()
    {
        if (account == null) return "";
        
        var change = account.Balance - originalBalance;
        var color = change >= 0 ? "green" : "red";
        var sign = change >= 0 ? "+" : "";
        
        return $"<span style='color: {color}'>{sign}{change.ToString("C", new System.Globalization.CultureInfo("de-DE"))}</span>";
    }

    private bool HasChanges()
    {
        if (account == null || originalAccount == null) return false;
        
        return account.Name != originalAccount.Name ||
               account.Type != originalAccount.Type ||
               account.IBAN != originalAccount.IBAN ||
               account.Balance != originalAccount.Balance ||
               account.Currency != originalAccount.Currency ||
               account.BankName != originalAccount.BankName ||
               account.IsActive != originalAccount.IsActive ||
               account.Description != originalAccount.Description;
    }

    private void SaveAccount()
    {
        if (formValid && account != null)
        {
            // Hier würde die API-Call zum Speichern erfolgen
            // await AccountService.UpdateAsync(account);
            
            // Navigation zurück zur Übersicht
            // NavigationManager.NavigateTo("/konten");
            
            // Für Demo: Nur Log
            Console.WriteLine($"Konto aktualisiert: {account.Name}");
        }
    }

    private async Task DeleteAccount()
    {
        if (account != null)
        {
            // Hier würde Bestätigungsdialog und API-Call erfolgen
            // var result = await DialogService.ShowMessageBox(
            //     "Konto löschen",
            //     $"Möchten Sie das Konto '{account.Name}' wirklich löschen?",
            //     yesText: "Löschen", cancelText: "Abbrechen");
            
            // if (result == true)
            // {
            //     await AccountService.DeleteAsync(Id);
            //     NavigationManager.NavigateTo("/konten");
            // }
            
            Console.WriteLine($"Konto gelöscht: {account.Name}");
        }
    }

    private string GetAccountTypeIcon(AccountType type)
    {
        return type switch
        {
            AccountType.Girokonto => Icons.Material.Filled.AccountBalance,
            AccountType.Sparkonto => Icons.Material.Filled.Savings,
            AccountType.Tagesgeld => Icons.Material.Filled.TrendingUp,
            AccountType.Kreditkarte => Icons.Material.Filled.CreditCard,
            AccountType.Depot => Icons.Material.Filled.ShowChart,
            _ => Icons.Material.Filled.AccountBalanceWallet
        };
    }

    private Color GetAccountTypeColor(AccountType type)
    {
        return type switch
        {
            AccountType.Girokonto => Color.Primary,
            AccountType.Sparkonto => Color.Success,
            AccountType.Tagesgeld => Color.Info,
            AccountType.Kreditkarte => Color.Warning,
            AccountType.Depot => Color.Secondary,
            _ => Color.Default
        };
    }

    private string GetAccountTypeText(AccountType type)
    {
        return type switch
        {
            AccountType.Girokonto => "Girokonto",
            AccountType.Sparkonto => "Sparkonto",
            AccountType.Tagesgeld => "Tagesgeldkonto",
            AccountType.Kreditkarte => "Kreditkarte",
            AccountType.Depot => "Depot",
            _ => type.ToString()
        };
    }

    private List<Konto> GetTestAccounts()
    {
        return new List<Konto>
        {
            new Konto
            {
                Id = 1,
                Name = "Hauptkonto",
                Type = AccountType.Girokonto,
                IBAN = "DE89 3704 0044 0532 0130 00",
                Balance = 5432.50m,
                Currency = "EUR",
                BankName = "Sparkasse",
                IsActive = true,
                Description = "Hauptkonto für alltägliche Transaktionen"
            },
            new Konto
            {
                Id = 2,
                Name = "Sparkonto",
                Type = AccountType.Sparkonto,
                IBAN = "DE89 3704 0044 0532 0130 01",
                Balance = 15000.00m,
                Currency = "EUR",
                BankName = "Sparkasse",
                IsActive = true,
                Description = "Rücklagen für größere Anschaffungen"
            },
            new Konto
            {
                Id = 3,
                Name = "Tagesgeldkonto",
                Type = AccountType.Tagesgeld,
                IBAN = "DE89 5001 0517 0123 4567 89",
                Balance = 25000.00m,
                Currency = "EUR",
                BankName = "ING",
                IsActive = true,
                Description = "Tagesgeld mit 3,5% Zinsen"
            },
            new Konto
            {
                Id = 4,
                Name = "Kreditkarte Premium",
                Type = AccountType.Kreditkarte,
                IBAN = "DE89 1001 0010 0123 4567 89",
                Balance = -856.30m,
                Currency = "EUR",
                BankName = "Deutsche Bank",
                IsActive = true,
                Description = "Kreditkarte für Reisen und Online-Einkäufe"
            },
            new Konto
            {
                Id = 5,
                Name = "Depot",
                Type = AccountType.Depot,
                IBAN = "DE89 6001 0075 0123 4567 89",
                Balance = 42500.75m,
                Currency = "EUR",
                BankName = "Trade Republic",
                IsActive = true,
                Description = "Wertpapierdepot für langfristigen Vermögensaufbau"
            },
            new Konto
            {
                Id = 6,
                Name = "Altes Girokonto",
                Type = AccountType.Girokonto,
                IBAN = "DE89 2005 0550 1234 5678 90",
                Balance = 127.85m,
                Currency = "EUR",
                BankName = "Hamburger Sparkasse",
                IsActive = false,
                Description = "Nicht mehr genutztes Konto"
            }
        };
    }
}