@page "/transaktionen/neu"
@using System.ComponentModel.DataAnnotations
@using monexa.Models
@using monexa.Models.Enums

<PageTitle>Neue Transaktion</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4 mb-8">
    <!-- Header mit Zurück-Button -->
    <MudPaper Class="pa-4 mb-4" Elevation="0">
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" 
                           Color="Color.Default" 
                           Href="transaktionen"
                           Title="Zurück zur Übersicht"/>
            <MudText Typo="Typo.h5">Neue Transaktion</MudText>
        </MudStack>
    </MudPaper>

    <!-- Typ-Auswahl (Schnellwahl) -->
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <MudText Typo="Typo.h6" Class="mb-3">Transaktionstyp</MudText>
        <MudRadioGroup @bind-SelectedOption="transaction.Type">
            <MudStack Row="true" Spacing="2">
                <MudCard Outlined="true" Style="@GetTypeCardStyle(TransactionType.Einnahme)" Class="flex-grow-1">
                    <MudCardActionArea OnClick="@(() => transaction.Type = TransactionType.Einnahme)">
                        <MudCardContent Class="text-center pa-4">
                            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" 
                                     Color="Color.Success" 
                                     Size="Size.Large"/>
                            <MudRadio Option="@TransactionType.Einnahme" 
                                      Color="Color.Success">
                                <MudText Typo="Typo.body1"><strong>Einnahme</strong></MudText>
                            </MudRadio>
                        </MudCardContent>
                    </MudCardActionArea>
                </MudCard>

                <MudCard Outlined="true" Style="@GetTypeCardStyle(TransactionType.Ausgabe)" Class="flex-grow-1">
                    <MudCardActionArea OnClick="@(() => transaction.Type = TransactionType.Ausgabe)">
                        <MudCardContent Class="text-center pa-4">
                            <MudIcon Icon="@Icons.Material.Filled.TrendingDown" 
                                     Color="Color.Error" 
                                     Size="Size.Large"/>
                            <MudRadio Option="@TransactionType.Ausgabe" 
                                      Color="Color.Error">
                                <MudText Typo="Typo.body1"><strong>Ausgabe</strong></MudText>
                            </MudRadio>
                        </MudCardContent>
                    </MudCardActionArea>
                </MudCard>

                <MudCard Outlined="true" Style="@GetTypeCardStyle(TransactionType.Umbuchung)" Class="flex-grow-1">
                    <MudCardActionArea OnClick="@(() => transaction.Type = TransactionType.Umbuchung)">
                        <MudCardContent Class="text-center pa-4">
                            <MudIcon Icon="@Icons.Material.Filled.SwapHoriz" 
                                     Color="Color.Info" 
                                     Size="Size.Large"/>
                            <MudRadio Option="@TransactionType.Umbuchung" 
                                      Color="Color.Info">
                                <MudText Typo="Typo.body1"><strong>Umbuchung</strong></MudText>
                            </MudRadio>
                        </MudCardContent>
                    </MudCardActionArea>
                </MudCard>
            </MudStack>
        </MudRadioGroup>
    </MudPaper>

    <!-- Formular -->
    <MudPaper Class="pa-6" Elevation="2">
        <MudForm @ref="form" @bind-IsValid="formValid">
            <MudGrid Spacing="3">
                <!-- Basis-Informationen -->
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-2">Basis-Informationen</MudText>
                    <MudDivider />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="transaction.Description" 
                                  Label="Beschreibung" 
                                  Required="true"
                                  RequiredError="Beschreibung ist erforderlich"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Description"
                                  HelperText="z.B. REWE Einkauf, Gehalt, Miete"/>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudNumericField @bind-Value="transaction.Amount" 
                                     Label="Betrag" 
                                     Required="true"
                                     RequiredError="Betrag ist erforderlich"
                                     Min="0.01m"
                                     Format="N2"
                                     Variant="Variant.Outlined"
                                     Adornment="Adornment.Start"
                                     AdornmentText="€"
                                     HelperText="Betrag ohne Vorzeichen"/>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudDatePicker @bind-Date="transactionDate" 
                                   Label="Datum" 
                                   Required="true"
                                   Variant="Variant.Outlined"
                                   Adornment="Adornment.Start"
                                   AdornmentIcon="@Icons.Material.Filled.CalendarToday"
                                   DateFormat="dd.MM.yyyy"
                                   FirstDayOfWeek="DayOfWeek.Monday"/>
                </MudItem>

                <!-- Kategorie -->
                <MudItem xs="12" Class="mt-4">
                    <MudText Typo="Typo.h6" Class="mb-2">Kategorie</MudText>
                    <MudDivider />
                </MudItem>

                <MudItem xs="12">
                    <MudSelect @bind-Value="transaction.Category" 
                               Label="Kategorie" 
                               Required="true"
                               Variant="Variant.Outlined"
                               AnchorOrigin="Origin.BottomCenter">
                        @foreach (var category in GetAvailableCategories())
                        {
                            <MudSelectItem Value="@category">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@GetCategoryIcon(category)" Size="Size.Small" Color="@GetCategoryColor(category)"/>
                                    <MudText>@GetCategoryText(category)</MudText>
                                </MudStack>
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <!-- Konten -->
                <MudItem xs="12" Class="mt-4">
                    <MudText Typo="Typo.h6" Class="mb-2">
                        @(transaction.Type == TransactionType.Umbuchung ? "Von/Nach Konto" : "Konto")
                    </MudText>
                    <MudDivider />
                </MudItem>

                @if (transaction.Type == TransactionType.Umbuchung)
                {
                    <MudItem xs="12" md="6">
                        <MudSelect @bind-Value="transaction.AccountId" 
                                   Label="Von Konto" 
                                   Required="true"
                                   Variant="Variant.Outlined"
                                   Adornment="Adornment.Start"
                                   AdornmentIcon="@Icons.Material.Filled.AccountBalance">
                            @foreach (var account in accounts)
                            {
                                <MudSelectItem Value="@account.Id">@account.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect @bind-Value="transaction.ToAccountId" 
                                   Label="Nach Konto" 
                                   Required="true"
                                   Variant="Variant.Outlined"
                                   Adornment="Adornment.Start"
                                   AdornmentIcon="@Icons.Material.Filled.AccountBalance">
                            @foreach (var account in accounts.Where(a => a.Id != transaction.AccountId))
                            {
                                <MudSelectItem Value="@((int?)account.Id)">@account.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="12">
                        <MudSelect @bind-Value="transaction.AccountId" 
                                   Label="Konto" 
                                   Required="true"
                                   Variant="Variant.Outlined"
                                   Adornment="Adornment.Start"
                                   AdornmentIcon="@Icons.Material.Filled.AccountBalance"
                                   HelperText="Wählen Sie das betroffene Konto aus">
                            @foreach (var account in accounts)
                            {
                                <MudSelectItem Value="@account.Id">
                                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                        <MudText>@account.Name</MudText>
                                        <MudChip Size="Size.Small" Color="@GetAccountTypeColor(account.Type)">
                                            @GetAccountTypeText(account.Type)
                                        </MudChip>
                                    </MudStack>
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }

                <!-- Notizen -->
                <MudItem xs="12" Class="mt-4">
                    <MudText Typo="Typo.h6" Class="mb-2">Zusätzliche Informationen</MudText>
                    <MudDivider />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="transaction.Notes" 
                                  Label="Notizen" 
                                  Lines="4"
                                  Variant="Variant.Outlined"
                                  HelperText="Optional: Zusätzliche Informationen zur Transaktion"/>
                </MudItem>

                <!-- Vorschau Card -->
                <MudItem xs="12" Class="mt-4">
                    <MudCard Outlined="true">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Vorschau</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudChip Color="@GetTransactionTypeColor(transaction.Type)" Variant="Variant.Filled">
                                    @transaction.Type.ToString()
                                </MudChip>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudText Typo="Typo.caption" Color="Color.Default">Beschreibung</MudText>
                                    <MudText Typo="Typo.body1">
                                        <strong>@(string.IsNullOrEmpty(transaction.Description) ? "-" : transaction.Description)</strong>
                                    </MudText>
                                </MudItem>
                                <MudItem xs="6" Style="text-align: right;">
                                    <MudText Typo="Typo.caption" Color="Color.Default">Betrag</MudText>
                                    <MudText Typo="Typo.h5" Color="@GetTransactionTypeColor(transaction.Type)">
                                        @GetPreviewAmount()
                                    </MudText>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudText Typo="Typo.caption" Color="Color.Default">Datum</MudText>
                                    <MudText Typo="Typo.body2">
                                        @(transactionDate?.ToString("dd.MM.yyyy") ?? "-")
                                    </MudText>
                                </MudItem>
                                <MudItem xs="6" Style="text-align: right;">
                                    <MudText Typo="Typo.caption" Color="Color.Default">Kategorie</MudText>
                                    <MudChip Size="Size.Small" Color="@GetCategoryColor(transaction.Category)">
                                        @GetCategoryText(transaction.Category)
                                    </MudChip>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudPaper>

    <!-- Action Buttons - Fixed am unteren Rand für mobile -->
    <MudPaper Class="pa-4 mt-4" Elevation="4" Style="position: sticky; bottom: 0; z-index: 10;">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudButton Variant="Variant.Outlined" 
                       Color="Color.Default"
                       StartIcon="@Icons.Material.Filled.Cancel"
                       Href="/transaktionen">
                Abbrechen
            </MudButton>
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Save"
                       OnClick="SaveTransaction"
                       Disabled="@(!formValid)">
                Transaktion erstellen
            </MudButton>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private Transaction transaction = new() 
    { 
        Type = TransactionType.Ausgabe,
        Category = TransactionCategory.SonstigeAusgaben,
        Amount = 0,
        AccountId = 0
    };
    private DateTime? transactionDate = DateTime.Today;
    private List<Konto> accounts = new();
    private MudForm form;
    private bool formValid;

    protected override void OnInitialized()
    {
        LoadAccounts();
    }

    private void LoadAccounts()
    {
        // Testdaten - in echter Anwendung vom Backend laden
        accounts = new List<Konto>
        {
            new Konto { Id = 1, Name = "Hauptkonto", Type = AccountType.Girokonto },
            new Konto { Id = 2, Name = "Sparkonto", Type = AccountType.Sparkonto },
            new Konto { Id = 3, Name = "Tagesgeldkonto", Type = AccountType.Tagesgeld },
            new Konto { Id = 4, Name = "Kreditkarte Premium", Type = AccountType.Kreditkarte },
            new Konto { Id = 5, Name = "Depot", Type = AccountType.Depot }
        };
    }

    private IEnumerable<TransactionCategory> GetAvailableCategories()
    {
        // Kategorien basierend auf Transaktionstyp filtern
        if (transaction.Type == TransactionType.Einnahme)
        {
            return new[] 
            { 
                TransactionCategory.Gehalt, 
                TransactionCategory.SonstigeEinnahmen 
            };
        }
        else if (transaction.Type == TransactionType.Umbuchung)
        {
            return new[] 
            { 
                TransactionCategory.Sparen 
            };
        }
        else
        {
            return Enum.GetValues(typeof(TransactionCategory))
                .Cast<TransactionCategory>()
                .Where(c => c != TransactionCategory.Gehalt && 
                           c != TransactionCategory.SonstigeEinnahmen);
        }
    }

    private string GetTypeCardStyle(TransactionType type)
    {
        if (transaction.Type == type)
        {
            var color = type switch
            {
                TransactionType.Einnahme => "var(--mud-palette-success)",
                TransactionType.Ausgabe => "var(--mud-palette-error)",
                TransactionType.Umbuchung => "var(--mud-palette-info)",
                _ => "var(--mud-palette-primary)"
            };
            return $"border: 2px solid {color};";
        }
        return "";
    }

    private string GetPreviewAmount()
    {
        if (transaction.Amount == 0) return "0,00 €";
        
        var prefix = transaction.Type == TransactionType.Einnahme ? "+" : "-";
        return $"{prefix} {transaction.Amount.ToString("C", new System.Globalization.CultureInfo("de-DE"))}";
    }

    private void SaveTransaction()
    {
        if (formValid && transactionDate.HasValue)
        {
            transaction.Date = transactionDate.Value;
            
            // Hier würde die API-Call zum Speichern erfolgen
            // await TransactionService.CreateAsync(transaction);
            
            // Navigation zurück zur Übersicht
            // NavigationManager.NavigateTo("/transaktionen");
            
            // Für Demo: Nur Log
            Console.WriteLine($"Neue Transaktion erstellt: {transaction.Description}, {transaction.Amount}€");
        }
    }

    private Color GetTransactionTypeColor(TransactionType type)
    {
        return type switch
        {
            TransactionType.Einnahme => Color.Success,
            TransactionType.Ausgabe => Color.Error,
            TransactionType.Umbuchung => Color.Info,
            _ => Color.Default
        };
    }

    private Color GetCategoryColor(TransactionCategory category)
    {
        return category switch
        {
            TransactionCategory.Gehalt => Color.Success,
            TransactionCategory.Lebensmittel => Color.Primary,
            TransactionCategory.Wohnen => Color.Info,
            TransactionCategory.Transport => Color.Warning,
            TransactionCategory.Freizeit => Color.Secondary,
            _ => Color.Default
        };
    }

    private Color GetAccountTypeColor(AccountType type)
    {
        return type switch
        {
            AccountType.Girokonto => Color.Primary,
            AccountType.Sparkonto => Color.Success,
            AccountType.Tagesgeld => Color.Info,
            AccountType.Kreditkarte => Color.Warning,
            AccountType.Depot => Color.Secondary,
            _ => Color.Default
        };
    }

    private string GetCategoryIcon(TransactionCategory category)
    {
        return category switch
        {
            TransactionCategory.Gehalt => Icons.Material.Filled.AttachMoney,
            TransactionCategory.Lebensmittel => Icons.Material.Filled.ShoppingCart,
            TransactionCategory.Wohnen => Icons.Material.Filled.Home,
            TransactionCategory.Transport => Icons.Material.Filled.DirectionsCar,
            TransactionCategory.Freizeit => Icons.Material.Filled.SportsEsports,
            TransactionCategory.Gesundheit => Icons.Material.Filled.LocalHospital,
            TransactionCategory.Shopping => Icons.Material.Filled.ShoppingBag,
            TransactionCategory.Nebenkosten => Icons.Material.Filled.Receipt,
            TransactionCategory.Sparen => Icons.Material.Filled.Savings,
            TransactionCategory.SonstigeEinnahmen => Icons.Material.Filled.TrendingUp,
            TransactionCategory.SonstigeAusgaben => Icons.Material.Filled.MoreHoriz,
            _ => Icons.Material.Filled.Category
        };
    }

    private string GetCategoryText(TransactionCategory category)
    {
        return category switch
        {
            TransactionCategory.Gehalt => "Gehalt",
            TransactionCategory.Lebensmittel => "Lebensmittel",
            TransactionCategory.Wohnen => "Wohnen",
            TransactionCategory.Transport => "Transport",
            TransactionCategory.Freizeit => "Freizeit",
            TransactionCategory.Gesundheit => "Gesundheit",
            TransactionCategory.Shopping => "Shopping",
            TransactionCategory.Nebenkosten => "Nebenkosten",
            TransactionCategory.Sparen => "Sparen",
            TransactionCategory.SonstigeEinnahmen => "Sonstige Einnahmen",
            TransactionCategory.SonstigeAusgaben => "Sonstige Ausgaben",
            _ => category.ToString()
        };
    }

    private string GetAccountTypeText(AccountType type)
    {
        return type switch
        {
            AccountType.Girokonto => "Girokonto",
            AccountType.Sparkonto => "Sparkonto",
            AccountType.Tagesgeld => "Tagesgeld",
            AccountType.Kreditkarte => "Kreditkarte",
            AccountType.Depot => "Depot",
            _ => type.ToString()
        };
    }

    // Model Classes
    public class Transaction
    {
        public int Id { get; set; }
        
        [Required(ErrorMessage = "Beschreibung ist erforderlich")]
        public string Description { get; set; } = "";
        
        [Required(ErrorMessage = "Betrag ist erforderlich")]
        [Range(0.01, double.MaxValue, ErrorMessage = "Betrag muss größer als 0 sein")]
        public decimal Amount { get; set; }
        
        [Required]
        public DateTime Date { get; set; }
        
        public TransactionType Type { get; set; }
        
        public TransactionCategory Category { get; set; }
        
        [Required(ErrorMessage = "Konto ist erforderlich")]
        public int AccountId { get; set; }
        
        public int? ToAccountId { get; set; }
        
        public string? Notes { get; set; }
    }
   
}